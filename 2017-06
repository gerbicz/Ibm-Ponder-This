Hi!

n=9999510 is a (possible) solution.

it is not solvable for n, but solvable for 62 changes (from the 63 one digit changes). Used a c code to generate all valid strings using the basic operations for a given n value. Say the digits of n is [v[1],v[2],..v[7]], then at each step we use the digits from the p-th digit to the q-th digit, we can form the first number c1 using the digits v[p],..,v[r] and for the second number c2 using v[r+1],..,v[q], there are 4 operations, but we can use the division only if c2!=0. So the resulting numbers are c={c1+c2,c1-c2,c1*c2,c1/c2}
(for c2=0 then c has 3 terms)
all of these numbers are rationals, so we can store the (not reduced form) numerators and denominators. We calculate these representations in increasing order of d=q-p, starting with d=0 (p=q) there are two cases: c={v[p],-v[p]} for the single digit case.
There is a representation for 100 iff c[h]==100 for d=L-1=6 (so where p=1 and q=7) for some h=0,..,3.

Ofcourse if we are looking for a solution we have to call our routine for all single digit changed m number. Here there is a small improvement: if we have already called the routine for m, then we can use only a quick lookup table. And we started the search from n=10^L-1=9999999, this quicly found the above solution.
-----------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define L 7
#define target 100

int **ap,**aq;
int *val;
int fun(int x){
    
    int d,h,i,i1,i2,j,k,L1,L2,p,p1,p2,q,q1,q2,r,len,len2,v[L+1],c[(1<<L)+1];
    int P[4],Q[4];
    for(i=L;i>=1;i--){v[i]=x%10;x/=10;}
    
    for(d=0;d<L;d++)for(p=1;p<=L-d;p++){
        q=d+p;
        i=(1<<q)-(1<<(p-1));
        len=0;
        for(r=p;r<=q-1;r++){
            j=(1<<r)-(1<<(p-1));
            k=(1<<q)-(1<<r);
            L1=c[j];
            L2=c[k];
            for(i1=0;i1<L1;i1++)
                for(i2=0;i2<L2;i2++){
                    p1=ap[j][i1];q1=aq[j][i1];
                    p2=ap[k][i2];q2=aq[k][i2];
                    len2=3;
                    P[0]=p1*q2+p2*q1;Q[0]=q1*q2;// p1/q1+p2/q2
                    P[1]=p1*q2-p2*q1;Q[1]=q1*q2;// p1/q1-p2/q2
                    P[2]=p1*p2;Q[2]=q1*q2;// p1/q1*p2/q2
                    if(p2!=0){
                        len2++;
                        P[3]=p1*q2;Q[3]=q1*p2;// p1/q1/(p2/q2)
                    }
                    if(d==L-1){
                      for(h=0;h<len2;h++)
                          if((long long int)Q[h]*target==P[h])return 1;
                    }
                    else{
                      for(h=0;h<len2;h++){
                          ap[i][len]=P[h];
                          aq[i][len]=Q[h];
                          len++;
                      }
                    }
                }
        }
        if(p==q){
            len=2;
            ap[i][0]=v[p];aq[i][0]=1;
            ap[i][1]=-v[p];aq[i][1]=1;
        }
        c[i]=len;
    }
    return 0;// not found representation
}

int isprime(int n){int i;if(n<2)return 0;for(i=2;i*i<=n;i++)if(n%i==0)return 0;return 1;}

int main(void){
    
    int d,p,q,r,p2,z,i,j,k,x,res,m,n,miss,c[(1<<L)+1],T,mult[L+1];
    time_t sec=time(NULL);
    
    p2=1<<L;
    ap=(int**)malloc(p2*sizeof(int*));
    aq=(int**)malloc(p2*sizeof(int*));
    for(d=0;d<L-1;d++)for(p=1;p<=L-d;p++){
        q=d+p;
        i=(1<<q)-(1<<(p-1));
        z=2;
        for(r=p;r<=q-1;r++){
            j=(1<<r)-(1<<(p-1));
            k=(1<<q)-(1<<r);
            z+=4*c[j]*c[k];
        }
        c[i]=z;
        ap[i]=(int*)malloc(z*sizeof(int));
        aq[i]=(int*)malloc(z*sizeof(int));
    }
    
    mult[0]=1;for(i=1;i<=L;i++)mult[i]=10*mult[i-1];
    val=(int*)malloc(mult[L]*sizeof(int));
    
    for(i=0;i<mult[L];i++)val[i]=-1;// not examined
    
    // while(scanf("%d",&x)!=EOF)printf("val=%d;\n",fun(x));
    
    for(n=mult[L]-1;n>=0;n--)if(val[n]!=1){
        if(n%1000==0)printf("stat: n=%d; time=%ld sec.\n",n,time(NULL)-sec);
        miss=0;
        x=n;
        for(i=0;i<L;i++){
            res=x%10;x/=10;
            for(j=0;j<10;j++)if(j!=res){
                m=n+(j-res)*mult[i];
                if(val[m]==0)miss++;
            }
        }
        if(miss<=1){
           if(val[n]==-1)val[n]=fun(n);
           if(val[n]==0){
             x=n;
             for(i=0;i<L;i++){
                res=x%10;x/=10;
                for(j=0;miss<=1&&j<10;j++)if(j!=res){
                   m=n+(j-res)*mult[i];
                   if(val[m]==-1){
                      val[m]=fun(m);
                      if(val[m]==0)miss++;
                   }
                }
           }
           if(miss<=1)printf("n=%d;non_solved=%d;isprime(%d)=%d;\n",n,miss,n,isprime(n));
        }
    }}
    printf("Time=%ld sec.\n",time(NULL)-sec);
    
    return 0;
}
----------
Hi!

For a star:
n=0397799 is a 7 digit prime solution, and there is only one more prime solution: n=0765533. This time used a slightly improved method: first we don't make strings that are using exactly 6 digits out of the 7 digits, only in the case if with this restricted search we can't find a string (using all 7 digits) that evaluates to 100.

Moreover, an exhaustive search found all 7 digits solutions (there are 26 solutions), this took almost ten hours on a single thread of a fast core-i7. The solutions:
0155969,0159999,0347743,0397799,0459877,0659949,
0739756,0765533,0799557,0946776,0958774,0974767,
0987547,3497970,3949810,4778590,7455390,7457890,
7559970,7674790,7789540,8826670,8853910,9222970,
9499560,9999510.
