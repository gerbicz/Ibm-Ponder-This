Hi!

Let v=[1,2,4,8,84,103,122,146,160,174], and from the i-th bag (i=1,..,10) we take out v[i] golden coins. I've gotten this v vector with a short c code using backtracking: we need that each s=0;v[i];v[i]+v[j];v[i]+v[j]+v[k] is different for 1<=i<j<k<=10, because there are at most 3 bags that contains counterfeit coins and if the measurement with the weighing scale is w=10*(1+2+4+8+84+103+122+146+160+174)-s=8040-s,  then there are s counterfeit coins (we needed the extra s=0; condition because it is possible that there is no counterfeit coins in the bags). And we can find those bags because each v[i];v[i]+v[j];v[i]+v[j]+v[k] sums are different.

In backtracking we just iterate in the search space, we can assume that 0<v[1]<v[2]..<v[10], and if we fix v[i] we check that at most 3 term's sums are different, if yes then we increase i and set v[i]=v[i-1]+1, otherwise we backtrack. 
-----------
#include <stdio.h>

#define N 10
#define M 174


int main(){
  
    int a[N],v[3*M+1],i,j,k,s,test,backtrack,depth,rec=M+1;
    
    a[0]=0;
    depth=0;
    while(depth>=0){
        backtrack=0;
	a[depth]++;
	if(a[depth]>=rec)backtrack=1;
	else{
	   for(i=3*M;i>=0;i--)v[i]=0;
	   test=1;
	   for(i=0;test&&i<=depth;i++){
	       s=a[i];if(v[s])test=0;v[s]=1;
	       for(j=i+1;j<=depth;j++){s=a[i]+a[j];if(v[s])test=0;v[s]=1;
		   for(k=j+1;k<=depth;k++){s=a[i]+a[j]+a[k];if(v[s])test=0;v[s]=1;}}}
	   if(test){
	      if(depth==N-1){if(a[N-1]<rec){rec=a[N-1];for(i=0;i<N;i++)printf("%d,",a[i]);printf("\n");}}
	      else {depth++;a[depth]=a[depth-1];}
	   }
	}
	if(backtrack)depth--;
    }
    return 0;
}
-----------
Hi!

To get a star, solution for N=172:

let v=[3,6,12,24,82,92,127,132,152,172]; and again as before, from the i-th bag we take v[i] coins on the weighing scale for i=1,..,10. This will be good since s=0;v[i];v[i]+v[j];v[i]+v[j]+v[k] sums are different for 1<=i<j<k<=10, and we will see 10*(3+6+12+24+82+92+127+132+152+172)-s on the scale, so we know s, and from this we can get the counterfeit bags. It has been found with a restricted search: assuming v[4]<=25 (previously tried v[4]<=10, v[4]<=15, v[4]<=20 with no success), the program has found v in 6 minutes and in another 9 minutes proved that there is no better such solution. (It is still possible that we can reach N<172 with v[4]>25). Attached the c source code (slightly different from the previous code, used some bit arithmetic).
-----------
#include <stdio.h>
#include <time.h>
#define N 10
#define M 174

typedef unsigned long long int llu;

int main(){
  
    int a[N+1],d,i,j,k,s,x,z,test,backtrack,depth,rec=M+1;
    llu offset[N+1][9],off[9],p[N+2][3],Bits[64];
    time_t sec=time(NULL);
    
    Bits[0]=1;for(i=1;i<64;i++)Bits[i]=2*Bits[i-1];
    a[1]=0;
    depth=1;
    for(i=0;i<9;i++)offset[0][i]=0;
    for(i=0;i<3;i++)p[1][i]=0xffffffffffffffff;
    while(depth>0){
        backtrack=0;
	a[depth]++;
	z=a[depth];
	if(z>=rec||(depth==4&&a[4]>25))backtrack=1;
	else{
	   if(p[depth][z>>6]&Bits[z&63]){
	   for(i=0;i<3;i++)p[depth+1][i]=p[depth][i];
	      for(i=0;i<9;i++)offset[depth][i]=offset[depth-1][i];
	      s=z;offset[depth][s>>6]|=Bits[s&63];
	      for(i=1;i<depth;i++){s=a[i]+z;offset[depth][s>>6]|=Bits[s&63];}
	      for(i=1;i<depth;i++){x=a[i];for(j=i+1;j<depth;j++){s=x+a[j]+z;offset[depth][s>>6]|=Bits[s&63];}}

	   for(d=a[depth]+1;d<rec;d++)if(p[depth][d>>6]&Bits[d&63]){
	      for(i=0;i<9;i++)off[i]=offset[depth][i];
	      z=d;
	      test=1;
	      s=z;if(off[s>>6]&Bits[s&63])test=0;off[s>>6]|=Bits[s&63];
	      if(test){for(i=1;test&&i<=depth;i++){s=a[i]+z;if(off[s>>6]&Bits[s&63])test=0;off[s>>6]|=Bits[s&63];}}
	      if(test){for(i=1;test&&i<=depth;i++){x=a[i];for(j=i+1;j<=depth;j++){s=x+a[j]+z;if(off[s>>6]&Bits[s&63])test=0;off[s>>6]|=Bits[s&63];}}}
	      if(!test)p[depth+1][d>>6]&=~Bits[d&63];
	   }
	   if(depth==N){if(a[N]<rec){rec=a[N];for(i=1;i<=N;i++)printf("%d,",a[i]);printf("\n");}}
	   else {depth++;a[depth]=a[depth-1];}
	   }
	}
	if(backtrack)depth--;
    }
    printf("Time=%ld sec.\n",time(NULL)-sec);
    return 0;
}
-----------
Hi!

To get **, the optimal solution has N=157:

Let v=[5,10,20,40,75,106,138,144,150,157]; we take v[i] coins on the scale from the i-th bag. And as before here s=0;v[i];v[i]+v[j];v[i]+v[j]+v[k] sums are different for 1<=i<j<k<=10 so we'll know the bags with conterfeit coins.

First a restricted search has found this solution assuming that v[4]<=40 in less than one hour (tried v[4]<=30 also). Then made a full search which took roughly ten hours on a single thread of my Core-i3 laptop, the code was similar to 2016aug2.c . Interestingly this solution contains also a four term geometric progression with q=2, assuming this we can rediscover the solution for N=157 (and prove that there is no such better solution) in only 18 seconds.
