Hi!

The optimal number of violations is 1, and one solution is:
BDACBADCBACDBCDABCDABCDA
ABCADBCDABDACBADCABCDBCD
CADBCDABDCABDACBADCBADBC
DCBDACBACDBCADBCDBADCAAB

(the only violation is at the 23rd hour for letter 'A')

A dynamic programming approach: fix the used permutation set (its size is i), and the last two permutations (in an ordered way), we compute the minimal number of violations for all of these subproblems.
For i<2 this is just zero, for i=2 we see all (two) permutations, and we can simply count the number of violations.
For i>2 we fix every (possible) permutation in the (i-2)-th hour, in this way we know the permutation set in the first (i-1) hour and the last two permutations ( (i-2)-th and (i-1)-th ), but we have already computed the optimal number of violations for this, add to this the number of violations in the i-th hour; and we choose that i-th permutation that gives the smallest total number of violations. We don't need to store the used permutations, since after the whole table built we can simply use this table to go backwards to find the permutations in each hour. My c code solved the puzzle in 7 minutes using one thread on a Core-i3.

For N=4 let FN=N!=24 then the size of the table computed is sum(i=0,FN,binomial(FN,i)*i*(i-1))=2^(FN-2)*FN*(FN-1)=2315255808, since the number of violations is at most N*FN<256 we can solve this problem using less than 3 GB of memory (we need one byte per table entry). We could also reduce the memory a lot, because the optimal number of violations was only 1.
-----------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 4
#define FN 24 // N!
#define SIZE 578813952  // FN*(FN-1)*2^(FN-4)

typedef unsigned int ui;
int main(void){
    
    int p[FN][N],V2[FN][FN],V3[FN][FN][FN],x[N],ans[FN],bit[FN],bit2[FN],off[FN];
    int i,i1,i2,i3,j,k,l1,l2,l3,t,c,cnt,cnt2,pow2,size,q,found,tst,v;
    ui pos,pos2,*dp,*stpos,opt,opt2,offset;
    time_t sec=time(NULL);
    
    cnt=0;t=1;
    for(i=0;i<N;i++)t*=N;
    for(i=0;i<t;i++){v=i;
      for(j=0;j<N;j++){x[j]=v%N;v/=N;}
      tst=1;for(j=0;j<N;j++)for(k=j+1;k<N;k++)if(x[j]==x[k])tst=0;
      if(tst){for(j=0;j<N;j++)p[cnt][j]=x[j];cnt++;}
    }
    
    for(i1=0;i1<FN;i1++)for(i2=0;i2<FN;i2++){c=0;for(k=0;k<N;k++)c+=(p[i1][k]==p[i2][k]);V2[i1][i2]=c;}
    for(i1=0;i1<FN;i1++)for(i2=0;i2<FN;i2++)for(i3=0;i3<FN;i3++)
       {c=0;for(k=0;k<N;k++)c+=((p[i1][k]==p[i3][k])||(p[i2][k]==p[i3][k]));V3[i1][i2][i3]=c;}
    
    pow2=1<<FN;size=pow2*FN;
    dp=(ui*)malloc(SIZE*sizeof(ui));
    stpos=(ui*)malloc(pow2*sizeof(ui));

    pos=0;
    for(i=0;i<pow2;i++){
        v=i;cnt=0;for(k=0;k<FN;k++){bit[k]=v&1;cnt+=v&1;v>>=1;}
        if(cnt>=2){
	  stpos[i]=pos;
	   for(l2=0;l2<FN;l2++)for(l3=0;l3<FN;l3++)if(bit[l2]&&bit[l3]&&l2!=l3){
	       if(cnt==2)opt=V2[l2][l3];
	       else{
		  opt=N*FN+1;
		  v=i-(1<<l3);cnt2=0;for(k=0;k<FN;k++){if(v&1){off[k]=cnt2;cnt2++;};v>>=1;}
		  for(l1=0;l1<FN;l1++)if(bit[l1]&&l1!=l2&&l1!=l3){
		      pos2=stpos[i-(1<<l3)]+(cnt2-1)*off[l1]+off[l2]-(l1<l2); // (l1,l2)
                      if(cnt2>=2){opt2=V3[l1][l2][l3]+((dp[pos2>>2]>>(8*(pos2&3)))&255);}
                      else       {opt2=V3[l1][l2][l3];}
                      if(opt2<opt)opt=opt2;
		  }
	       }
	          dp[pos>>2]+=opt<<(8*(pos&3));
		  pos++;
	   }
	}
    }
    //printf("pos=%u;\n",pos);

    opt=N*FN+1;
    offset=stpos[pow2-1];
    for(l2=0;l2<FN;l2++)for(l3=0;l3<FN;l3++)if(l2!=l3){
        opt2=(dp[offset>>2]>>(8*offset&3))&255;
        if(opt2<opt){opt=opt2;i2=l2;i3=l3;}
        offset++;
    }
    l2=i2;
    l3=i3;
    offset=pow2-1;
    printf("time=%ld sec.;opt=%d;\n",time(NULL)-sec,opt);
    for(i=FN-1;i>=2;i--){
        ans[i]=l3;
        v=offset;for(k=0;k<FN;k++){bit[k]=v&1;v>>=1;}
        v=offset-(1<<l3);cnt2=0;for(k=0;k<FN;k++){if(v&1){off[k]=cnt2;cnt2++;};v>>=1;}
        for(l1=0;l1<FN;l1++)if(bit[l1]&&l1!=l2&&l1!=l3){
	    pos2=stpos[offset-(1<<l3)]+(cnt2-1)*off[l1]+off[l2]-(l1<l2);
	    if(cnt2>=2){opt2=V3[l1][l2][l3]+((dp[pos2>>2]>>(8*(pos2&3)))&255);}
            else       {opt2=V3[l1][l2][l3];}
            if(opt==opt2){
	       opt-=V3[l1][l2][l3];
	       //printf("Found! l1=%d;l2=%d;l3=%d;opt=%u;\n",l1,l2,l3,opt);
	       offset-=1<<l3;
	       l3=l2;
	       l2=l1;
	       break;
	    }
	}
    }
    ans[1]=l3;
    ans[0]=l2;
    for(i=0;i<N;i++){for(j=0;j<FN;j++)printf("%c",'A'+p[ans[j]][i]);printf("\n");}
    
    free(dp);
    free(stpos);
    
    return 0;
}
