Hi!

The minimal is N=42, and one possible solution:
0 13 29
11 12 19
10 11 21
9 10 23
8 9 25
7 8 27
6 7 29
5 18 19
4 17 21
3 16 23
2 15 25
1 14 27

found this in 18 minutes with a backtracking code: for each month we store the possible triplets: if we fix the i-th month's triplet, then we store those triplets in the further months (j=i+1,..,12) for that we don't get a violation for the (i,j) month dual. In this way we ensure that (k,j) month dual will be valid for all k<i (where j>i). If we reach i=12, then obviously we found a solution. See the attached c code. 
------------

#include <stdio.h>
#include <stdlib.h>
#include <time.h>


#define maxn 100
#define nmonth 12 // number of months

int match(int i1,int i2,int i3,int j1,int j2,int j3){
  
    int c1=0,c2=0;
    
    if(i1>j1)c1++;if(j1>i1)c2++;
    if(i2>j2)c1++;if(j2>i2)c2++;
    if(i3>j3)c1++;if(j3>i3)c2++;
    if(c1>c2)return 0;
    if(c2>c1)return 2;
    return 1;
}
    
    
int main(void){
    
    int i,j,n,i1,i2,i3,j1,j2,j3,test,d1,d2,num,good,n2,cnt,x,k,p,a[maxn*maxn][3],**e,***u,size[nmonth][nmonth];
    int depth,backtrack,pos[nmonth],si[nmonth],t[nmonth][maxn],win[nmonth][nmonth];
    time_t sec=time(NULL);
    
    n2=maxn*maxn;
    e=(int**)malloc(n2*sizeof(int*));
    for(i=0;i<n2;i++)e[i]=(int*)malloc(n2*sizeof(int));
    u=(int***)malloc(nmonth*sizeof(int**));
    for(i=0;i<nmonth;i++)u[i]=(int**)malloc(nmonth*sizeof(int*));
    for(i=0;i<nmonth;i++)for(j=0;j<nmonth;j++)u[i][j]=(int*)malloc(n2*sizeof(int));
    
    for(i=0;i<nmonth;i++)
      for(j=0;j<nmonth;j++){
	  d1=(j-i)%nmonth;if(d1<0)d1+=nmonth;
	  d2=(i-j)%nmonth;if(d2<0)d2+=nmonth;
	  if(d1<d2)win[i][j]=0;
	  else if(d1==d2)win[i][j]=1;
	  else win[i][j]=2;}

    test=1;
    for(n=3;test;n++){
       printf("Testing nmonth=%d;n=%d;time=%ld sec.\n",nmonth,n,time(NULL)-sec);
       num=0;
       for(i1=0;i1<=n;i1++)
	 for(i2=0;i2<=n;i2++){
	     i3=n-i1-i2;
	     if(i3>=0&&i1!=i2&&i2!=i3&&i3!=i1){
	       a[num][0]=i1;
	       a[num][1]=i2;
	       a[num][2]=i3;
	       num++;
	     }}
	     printf("num=%d;\n",num);
       for(i=0;i<num;i++)
	  for(j=0;j<num;j++){
	      i1=a[i][0];i2=a[i][1];i3=a[i][2];
	      j1=a[j][0];j2=a[j][1];j3=a[j][2];
	      int z[3]={0,0,0};
	      z[match(i1,i2,i3,j1,j2,j3)]++;
	      z[match(i1,i3,i2,j1,j2,j3)]++;
	      z[match(i2,i1,i3,j1,j2,j3)]++;
	      z[match(i2,i3,i1,j1,j2,j3)]++;
	      z[match(i3,i1,i2,j1,j2,j3)]++;
	      z[match(i3,i2,i1,j1,j2,j3)]++;
	      if(z[0]>z[2])e[i][j]=0;
	      else if(z[2]>z[0])e[i][j]=2;
	      else e[i][j]=1;
	  }
	  
     depth=0;
     pos[0]=-1;
     si[0]=num;
     for(i=0;i<num;i++)t[0][i]=i;
     for(j=1;j<nmonth;j++){size[0][j]=num;for(i=0;i<num;i++)u[0][j][i]=i;}
     
     while(depth>=0&&test){
         backtrack=0;
	 pos[depth]++;
	 if(pos[depth]>=si[depth])backtrack=1;
	 else{
	    if(depth==nmonth-1){
	       test=0;
	       for(i=0;i<nmonth;i++){
		   x=t[i][pos[i]];
		   printf("%d %d %d\n",a[x][0],a[x][1],a[x][2]);
	       }
	    }
	    else{
	       p=t[depth][pos[depth]];
	       for(k=depth+1;k<nmonth;k++){
		   cnt=0;
		   for(i=0;i<size[depth][k];i++)
		       if(win[depth][k]==e[p][u[depth][k][i]])
		       {u[depth+1][k][cnt]=u[depth][k][i];cnt++;}
		   size[depth+1][k]=cnt;
	       }
	       cnt=size[depth+1][depth+1];
	       if(cnt>0){
		 depth++;
		 si[depth]=cnt;pos[depth]=-1;
		 for(i=0;i<cnt;i++)t[depth][i]=u[depth][depth][i];
	      }
	    }
	 }
	 if(backtrack)depth--;
     }
    }
    printf("Done in %ld sec.\n",time(NULL)-sec);
    return 0;
}
