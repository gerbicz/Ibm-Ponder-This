Hi!

One possible solution for N=57:

S_1={1,5,6,7,8,13};
S_2={2,3,4,6,7,9};

See my attached c code for the problem, used a backtracking search with the following ideas: in one set (say S_1) there should be 1, in the other set there should be 1 or 2 to reach 1 with s_1*s_2, in the search I've chosen 2 in the S_2 set. If v is the smallest not reached term, then there should be s_1 in S_1 and s_2 in S_2 for that abs(v-s_1*s_2)<=1. In the backtracking search I've supposed that we know already one term (s_1 or s_2), however in the general case this could be still false (so both of them is unknown). The code runs in roughly 1 minute.

ps. One could assume that in the search we will find the terms in increasing order (in S_1 and in S_2), but such a restricted search gives only N=55.

--------------
#include <stdio.h>
#include <assert.h>

#define N 6
#define maxv 100

int a[2][N+2],F[maxv+1];
int findm(int size1,int size2){
  
    int i,j,v;
    for(i=1;i<=maxv;i++)F[i]=0;
    for(i=1;i<=size1;i++)for(j=1;j<=size2;j++){
        v=a[0][i]*a[1][j];
	if(v-1<=maxv)F[v-1]=1;
	if(v<=maxv)  F[v]=1;
	if(v+1<=maxv)F[v+1]=1;
    }
    for(v=1;v<=maxv&&F[v];v++);
    return v;
}


int main(void){
  
    int size[3][2*N+2],missing[2*N+2],pos[2*N+2],offset[2*N+2];
    int i,j,v,size1,size2,si2,depth,backtrack,rec;
    
    a[0][0]=0;a[0][1]=1;
    a[1][0]=0;a[1][1]=1;
    
    rec=0;
    depth=2;
    pos[2]=1;
    offset[2]=1;
    size[0][1]=1;
    size[1][1]=0;
    missing[2]=1;
    while(depth>1){
         backtrack=0;
	 pos[depth]++;
	 si2=size[offset[depth]][depth-1];
	 if(si2>=N){
	     offset[depth]++;
	     if(offset[depth]>1)backtrack=1;
	     else pos[depth]=1;// pos[depth]=1+a[1][size[1][depth-1]];
	 }
	 
    if(backtrack==0){
	 if(pos[depth]>missing[depth]+1){
	    offset[depth]++;
	    si2=size[offset[depth]][depth-1];
	    if(offset[depth]>1||si2>=N)backtrack=1;
	    else {pos[depth]=1;}//pos[depth]=1+a[1][size[1][depth-1]];
	 }
	 if(backtrack==0){
	    size[0][depth]=size[0][depth-1];
	    size[1][depth]=size[1][depth-1];
	    size[offset[depth]][depth]++;
	    a[offset[depth]][size[offset[depth]][depth]]=pos[depth];
	    v=findm(size[0][depth],size[1][depth]);
	    
	    if(v>missing[depth]){
	       if(depth==2*N){
		  v--;
		  if(v>rec){rec=v;printf("record=%d;\n",rec);for(i=0;i<2;i++){for(j=1;j<=N;j++)printf("%d;",a[i][j]);printf("  ");}printf("\n");}
	       }
	       else{depth++;offset[depth]=0;
		 //pos[depth]=a[0][size[0][depth-1]];
		 pos[depth]=0;
		 missing[depth]=v;}
	    }
	 }}
         if(backtrack)depth--;
    }
    return 0;
}
---------
Hi!

My improved solution to get more stars:
one possible solution for N=66:

S_1={1,6,7,8,9,10};
S_2={3/2,3,11/2,6,13/2,7};

Searched all pair of sets where 1 is in S_1 and all terms of S_1 and S_2 is integer or half-integer from the [1,13] interval.
--------
Hi!

New improvement: one solution for N=67:
S_1={1,5,6,7,8,9};
S_2={2,4,13/3,20/3,7,22/3};

Found this while searched for pair of sets where all terms of S_1 and S_2 are rationals with denominator=3 or 1, and the terms are in the [1,10] interval, and fixing 1 in S_1.
